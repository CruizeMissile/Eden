
#pragma once

#include <LLGL/llgl.h>

namespace eden::render
{
    using application_descriptor_t             = LLGL::ApplicationDescriptor;
    using attachment_clear_t                   = LLGL::AttachmentClear;
    using attachment_descriptor_t              = LLGL::AttachmentDescriptor;
    using attachment_format_descriptor_t       = LLGL::AttachmentFormatDescriptor;
    using attachment_load_op_t                 = LLGL::AttachmentLoadOp;
    using attachment_store_op_t                = LLGL::AttachmentStoreOp;
    using attachment_type_t                    = LLGL::AttachmentType;
    using binding_descriptor_t                 = LLGL::BindingDescriptor;
    using blend_arithmetic_t                   = LLGL::BlendArithmetic;
    using blend_descriptor_t                   = LLGL::BlendDescriptor;
    using blend_op_t                           = LLGL::BlendOp;
    using blend_target_descriptor_t            = LLGL::BlendTargetDescriptor;
    using buffer_t                             = LLGL::Buffer;
    using buffer_array_t                       = LLGL::BufferArray;
    using buffer_descriptor_t                  = LLGL::BufferDescriptor;
    using buffer_flags_t                       = LLGL::BufferFlags;
    using buffer_type_t                        = LLGL::BufferType;
    using byte_buffer_t                        = LLGL::ByteBuffer;
    using canvas_t                             = LLGL::Canvas;
    using canvas_descriptor_t                  = LLGL::CanvasDescriptor;
    // using cast_color_value_t                   = LLGL::CastColorValue;
    using clear_flags_t                        = LLGL::ClearFlags;
    using clear_value_t                        = LLGL::ClearValue;
    using clipping_range_t                     = LLGL::ClippingRange;
    using clipping_range_t                     = LLGL::ClippingRange;
    template<typename T, size_t N>
    using color_t                              = LLGL::Color<T, N>;
    using color_rgb_ab_t                       = LLGL::ColorRGBAb;
    using color_rgb_ad_t                       = LLGL::ColorRGBAd;
    using color_rgb_af_t                       = LLGL::ColorRGBAf;
    template<typename T>
    using color_rgbat_t                        = LLGL::ColorRGBAT<T>;
    using color_rgb_aub_t                      = LLGL::ColorRGBAub;
    using color_rg_bb_t                        = LLGL::ColorRGBb;
    using color_rg_bd_t                        = LLGL::ColorRGBd;
    using color_rg_bf_t                        = LLGL::ColorRGBf;
    template<typename T>
    using color_rgbt_t                         = LLGL::ColorRGBT<T>;
    using color_rg_bub_t                       = LLGL::ColorRGBub;
    using command_buffer_t                     = LLGL::CommandBuffer;
    using command_buffer_descriptor_t          = LLGL::CommandBufferDescriptor;
    using command_buffer_ext_t                 = LLGL::CommandBufferExt;
    using command_buffer_flags_t               = LLGL::CommandBufferFlags;
    using command_queue_t                      = LLGL::CommandQueue;
    using compare_op_t                         = LLGL::CompareOp;
    // using compare_swo_t                        = LLGL::CompareSWO;
    using compute_pipeline_t                   = LLGL::ComputePipeline;
    using compute_pipeline_descriptor_t        = LLGL::ComputePipelineDescriptor;
    // using constants_t                          = LLGL::Constants::ignoreOffset;
    // using constants_t                          = LLGL::Constants::invalidSlot;
    // using constants_t                          = LLGL::Constants::maxThreadCount;
    // using convert_image_buffer_t               = LLGL::ConvertImageBuffer;
    using cpu_access_t                         = LLGL::CPUAccess;
    using cull_mode_t                          = LLGL::CullMode;
    using data_type_t                          = LLGL::DataType;
    // using data_type_size_t                     = LLGL::DataTypeSize;
    using debug_callback_t                     = LLGL::DebugCallback;
    using depth_bias_descriptor_t              = LLGL::DepthBiasDescriptor;
    using depth_descriptor_t                   = LLGL::DepthDescriptor;
    using display_t                            = LLGL::Display;
    using display_mode_descriptor_t            = LLGL::DisplayModeDescriptor;
    using dst_image_descriptor_t               = LLGL::DstImageDescriptor;
    using error_type_t                         = LLGL::ErrorType;
    using extent2_d_t                          = LLGL::Extent2D;
    using extent3_d_t                          = LLGL::Extent3D;
    using fence_t                              = LLGL::Fence;
    // using find_suitable_image_format_t         = LLGL::FindSuitableImageFormat;
    using format_t                             = LLGL::Format;
    // using format_bit_size_t                    = LLGL::FormatBitSize;
    using frame_profile_t                      = LLGL::FrameProfile;
    // using generate_empty_byte_buffer_t         = LLGL::GenerateEmptyByteBuffer;
    // using generate_image_buffer_t              = LLGL::GenerateImageBuffer;
    // using get_extent_ratio_t                   = LLGL::GetExtentRatio;
    // using get_primitive_topology_patch_size_t  = LLGL::GetPrimitiveTopologyPatchSize;
    using graphics_pipeline_t                  = LLGL::GraphicsPipeline;
    using graphics_pipeline_descriptor_t       = LLGL::GraphicsPipelineDescriptor;
    using image_t                              = LLGL::Image;
    // using image_data_size_t                    = LLGL::ImageDataSize;
    using image_format_t                       = LLGL::ImageFormat;
    // using image_format_size_t                  = LLGL::ImageFormatSize;
    using image_initialization_t               = LLGL::ImageInitialization;
    using index_format_t                       = LLGL::IndexFormat;
    using input_t                              = LLGL::Input;
    // using invalid_window_timer_id_t            = LLGL::invalidWindowTimerID;
    // using is_array_texture_t                   = LLGL::IsArrayTexture;
    // using is_byte_address_buffer_t             = LLGL::IsByteAddressBuffer;
    // using is_compressed_format_t               = LLGL::IsCompressedFormat;
    // using is_cube_texture_t                    = LLGL::IsCubeTexture;
    // using is_depth_format_t                    = LLGL::IsDepthFormat;
    // using is_depth_stencil_format_t            = LLGL::IsDepthStencilFormat;
    // using is_float_data_type_t                 = LLGL::IsFloatDataType;
    // using is_float_format_t                    = LLGL::IsFloatFormat;
    // using is_int_data_type_t                   = LLGL::IsIntDataType;
    // using is_integral_format_t                 = LLGL::IsIntegralFormat;
    // using is_mip_mapped_texture_t              = LLGL::IsMipMappedTexture;
    // using is_multi_sample_texture_t            = LLGL::IsMultiSampleTexture;
    // using is_normalized_format_t               = LLGL::IsNormalizedFormat;
    // using is_primitive_topology_patches_t      = LLGL::IsPrimitiveTopologyPatches;
    // using is_rw_buffer_t                       = LLGL::IsRWBuffer;
    // using is_shader_source_binary_t            = LLGL::IsShaderSourceBinary;
    // using is_shader_source_code_t              = LLGL::IsShaderSourceCode;
    // using is_stencil_format_t                  = LLGL::IsStencilFormat;
    // using is_structured_buffer_t               = LLGL::IsStructuredBuffer;
    // using is_typed_buffer_t                    = LLGL::IsTypedBuffer;
    // using is_u_int_data_type_t                 = LLGL::IsUIntDataType;
    using key_t                                = LLGL::Key;
    // using log_t                                = LLGL::Log::PostReport;
    using log_t                                = LLGL::Log::ReportCallback;
    using log_t                                = LLGL::Log::ReportType;
    // using log_t                                = LLGL::Log::SetReportCallback;
    // using log_t                                = LLGL::Log::SetReportCallbackStd;
    using logic_op_t                           = LLGL::LogicOp;
    // using max_color_value_t                    = LLGL::MaxColorValue;
    using multi_sampling_descriptor_t          = LLGL::MultiSamplingDescriptor;
    using non_copyable_t                       = LLGL::NonCopyable;
    // using num_mip_levels_t                     = LLGL::NumMipLevels;
    using offset2_d_t                          = LLGL::Offset2D;
    using offset3_d_t                          = LLGL::Offset3D;
    using offset3_d_t                          = LLGL::Offset3D;
    using open_gl_context_profile_t            = LLGL::OpenGLContextProfile;
    using open_gl_dependent_state_descriptor_t = LLGL::OpenGLDependentStateDescriptor;
    using pipeline_layout_t                    = LLGL::PipelineLayout;
    using pipeline_layout_descriptor_t         = LLGL::PipelineLayoutDescriptor;
    using polygon_mode_t                       = LLGL::PolygonMode;
    using primitive_topology_t                 = LLGL::PrimitiveTopology;
    using primitive_type_t                     = LLGL::PrimitiveType;
    using profile_open_gl_descriptor_t         = LLGL::ProfileOpenGLDescriptor;
    using query_heap_t                         = LLGL::QueryHeap;
    using query_heap_descriptor_t              = LLGL::QueryHeapDescriptor;
    using query_pipeline_statistics_t          = LLGL::QueryPipelineStatistics;
    using query_type_t                         = LLGL::QueryType;
    using rasterizer_descriptor_t              = LLGL::RasterizerDescriptor;
    using render_condition_mode_t              = LLGL::RenderConditionMode;
    using render_context_t                     = LLGL::RenderContext;
    using render_context_descriptor_t          = LLGL::RenderContextDescriptor;
    using renderer_id_t                        = LLGL::RendererID;
    using renderer_info_t                      = LLGL::RendererInfo;
    using rendering_capabilities_t             = LLGL::RenderingCapabilities;
    using rendering_debugger_t                 = LLGL::RenderingDebugger;
    using rendering_features_t                 = LLGL::RenderingFeatures;
    using rendering_limits_t                   = LLGL::RenderingLimits;
    using rendering_profiler_t                 = LLGL::RenderingProfiler;
    using render_pass_t                        = LLGL::RenderPass;
    using render_pass_descriptor_t             = LLGL::RenderPassDescriptor;
    using render_system_t                      = LLGL::RenderSystem;
    using render_system_child_t                = LLGL::RenderSystemChild;
    using render_system_configuration_t        = LLGL::RenderSystemConfiguration;
    using render_system_descriptor_t           = LLGL::RenderSystemDescriptor;
    using render_target_t                      = LLGL::RenderTarget;
    using render_target_descriptor_t           = LLGL::RenderTargetDescriptor;
    using resource_t                           = LLGL::Resource;
    using resource_heap_t                      = LLGL::ResourceHeap;
    using resource_heap_descriptor_t           = LLGL::ResourceHeapDescriptor;
    using resource_type_t                      = LLGL::ResourceType;
    using resource_view_descriptor_t           = LLGL::ResourceViewDescriptor;
    using sampler_t                            = LLGL::Sampler;
    using sampler_address_mode_t               = LLGL::SamplerAddressMode;
    using sampler_descriptor_t                 = LLGL::SamplerDescriptor;
    using sampler_filter_t                     = LLGL::SamplerFilter;
    using scissor_t                            = LLGL::Scissor;
    using screen_origin_t                      = LLGL::ScreenOrigin;
    using shader_t                             = LLGL::Shader;
    using shader_compile_flags_t               = LLGL::ShaderCompileFlags;
    using shader_descriptor_t                  = LLGL::ShaderDescriptor;
    using shader_disassemble_flags_t           = LLGL::ShaderDisassembleFlags;
    using shader_program_t                     = LLGL::ShaderProgram;
    using shader_program_descriptor_t          = LLGL::ShaderProgramDescriptor;
    using shader_reflection_descriptor_t       = LLGL::ShaderReflectionDescriptor;
    using shader_source_type_t                 = LLGL::ShaderSourceType;
    using shader_type_t                        = LLGL::ShaderType;
    using shader_uniform_t                     = LLGL::ShaderUniform;
    using shading_language_t                   = LLGL::ShadingLanguage;
    // using split_format_t                       = LLGL::SplitFormat;
    using src_image_descriptor_t               = LLGL::SrcImageDescriptor;
    using stage_flags_t                        = LLGL::StageFlags;
    using stencil_descriptor_t                 = LLGL::StencilDescriptor;
    using stencil_face_descriptor_t            = LLGL::StencilFaceDescriptor;
    using stencil_op_t                         = LLGL::StencilOp;
    using storage_buffer_type_t                = LLGL::StorageBufferType;
    using stream_output_attribute_t            = LLGL::StreamOutputAttribute;
    using stream_output_format_t               = LLGL::StreamOutputFormat;
    using surface_t                            = LLGL::Surface;
    using texture_t                            = LLGL::Texture;
    // using texture_buffer_size_t                = LLGL::TextureBufferSize;
    using texture_descriptor_t                 = LLGL::TextureDescriptor;
    using texture_flags_t                      = LLGL::TextureFlags;
    using texture_region_t                     = LLGL::TextureRegion;
    // using texture_size_t                       = LLGL::TextureSize;
    using texture_type_t                       = LLGL::TextureType;
    using timer_t                              = LLGL::Timer;
    using uniform_descriptor_t                 = LLGL::UniformDescriptor;
    using uniform_location_t                   = LLGL::UniformLocation;
    using uniform_type_t                       = LLGL::UniformType;
    using uninitialize_tag_t                   = LLGL::UninitializeTag;
    // using validate_rendering_caps_t            = LLGL::ValidateRenderingCaps;
    using validate_rendering_caps_func_t       = LLGL::ValidateRenderingCapsFunc;
    // using version_t                            = LLGL::Version::GetID;
    // using version_t                            = LLGL::Version::GetMajor;
    // using version_t                            = LLGL::Version::GetMinor;
    // using version_t                            = LLGL::Version::GetRevision;
    // using version_t                            = LLGL::Version::GetStatus;
    // using version_t                            = LLGL::Version::GetString;
    using vertex_attribute_t                   = LLGL::VertexAttribute;
    using vertex_format_t                      = LLGL::VertexFormat;
    using video_adapter_descriptor_t           = LLGL::VideoAdapterDescriptor;
    using video_mode_descriptor_t              = LLGL::VideoModeDescriptor;
    using video_output_descriptor_t            = LLGL::VideoOutputDescriptor;
    using viewport_t                           = LLGL::Viewport;
    using vsync_descriptor_t                   = LLGL::VsyncDescriptor;
    using vulkan_renderer_configuration_t      = LLGL::VulkanRendererConfiguration;
    using warning_type_t                       = LLGL::WarningType;
    using window_t                             = LLGL::Window;
    using window_behavior_t                    = LLGL::WindowBehavior;
    using window_descriptor_t                  = LLGL::WindowDescriptor;
}
